stages:
  - testing
  - building
  - deploying

.project_shared: &project_shared
  image:
    name: node:12-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ~/.cache/yarn
  before_script:
    - yarn

testing:
  <<: *project_shared
  tags:
    - kube-02.bmidevelopment
  stage: testing
  script:
    - yarn lint
    - yarn format
    - yarn test

building:
  tags:
    - kube-02.bmidevelopment
  stage: building
  dependencies:
    - testing
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.13.0
    entrypoint: ['']
  script:
    - export IMAGE_TAG="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - export DOCKER_CONFIG="/kaniko/.docker"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - |
      /kaniko/executor --cache \
                       --context "$CI_PROJECT_DIR" \
                       --dockerfile "$CI_PROJECT_DIR/Dockerfile" \
                       --destination "$IMAGE_TAG" \
                       --build-arg VERSION="$CI_COMMIT_SHA" \
                       --build-arg PRIVATE_DEPS_USER="gitlab-ci-token" \
                       --build-arg PRIVATE_DEPS_TOKEN="$CI_JOB_TOKEN"
    - |
      if [ "$CI_COMMIT_REF_NAME" = "master" ];
      then
        /kaniko/executor --cache \
                         --context "$CI_PROJECT_DIR" \
                         --dockerfile "$CI_PROJECT_DIR/Dockerfile" \
                         --destination "$CI_REGISTRY_IMAGE:latest" \
                         --build-arg VERSION="$CI_COMMIT_SHA" \
                         --build-arg PRIVATE_DEPS_USER="gitlab-ci-token" \
                         --build-arg PRIVATE_DEPS_TOKEN="$CI_JOB_TOKEN"
      fi

.deploy_config: &deploy_config
  tags:
    - kube-02.bmidevelopment
  dependencies:
    - building
  stage: deploying
  image: registry.gitlab.com/greenhousegroup/meh/images/k8s-helm:2.0
  before_script:
    - export K8S_CONFIG="$MEH_K8S_CLUSTER_CONFIG"
    - echo "$CI_COMMIT_SHA" > VERSION
    - cp -r /usr/helm/chart ./chart
    - cp -r /usr/helm/scripts ./scripts{{deployTesting}}{{deployAcceptance}}{{deployProduction}}{{deployAirflow}}
